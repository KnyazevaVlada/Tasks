import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

/* 
В этой задаче нужно сохранить в файл состояние работы программы и вычитать состояние из файла без использования сериализации.
Реализуй логику записи в файл и чтения из файла для класса Human.
Поле name в классе Human не может быть пустым.
*/

public class Solution {
    public static void main(String[] args) {
        try {
            File human = File.createTempFile("human.bin", null);
            OutputStream outputStream = new FileOutputStream(human);
            InputStream inputStream = new FileInputStream(human);

            Human ivanov = new Human("Ivanov", new Asset("home", 999_999.99), new Asset("car", 2999.99));
            ivanov.save(outputStream);
            outputStream.flush();

            Human somePerson = new Human();
            somePerson.load(inputStream);
            inputStream.close();

        } catch (IOException e) {
            //e.printStackTrace();
            System.out.println("Oops, something wrong with my file");
        } catch (Exception e) {
            //e.printStackTrace();
            System.out.println("Oops, something wrong with save/load method");
        }
    }

    public static class Human {
        public String name;
        public List<Asset> assets = new ArrayList<>();

        public Human() {
        }

        public Human(String name, Asset... assets) {
            this.name = name;
            if (assets != null) {
                this.assets.addAll(Arrays.asList(assets));
            }
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Human human = (Human) o;

            if (!Objects.equals(name, human.name)) return false;
            return Objects.equals(assets, human.assets);
        }

        @Override
        public int hashCode() {
            int result = name != null ? name.hashCode() : 0;
            result = 31 * result + (assets != null ? assets.hashCode() : 0);
            return result;
        }

        public void save(OutputStream outputStream) {
            PrintWriter pw = new PrintWriter(outputStream);
            pw.println(this.name);
            if (this.assets.size() > 0) {
                for (Asset asset : this.assets) {
                    pw.println(asset.getName());
                    pw.println(asset.getPrice());
                }
            }
            pw.close();
        }

        public void load(InputStream inputStream) throws Exception {
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
            this.name = reader.readLine();
            while (reader.ready()) {
                String name = reader.readLine();
                double price = Double.parseDouble(reader.readLine());
                this.assets.add(new Asset(name, price));
            }
            reader.close();
        }
    }
}
